---
export interface Props {
  variant?: 'primary' | 'secondary' | 'ghost' | 'outline';
  size?: 'sm' | 'md' | 'lg' | 'xl';
  href?: string;
  target?: string;
  class?: string;
  disabled?: boolean;
  onclick?: string;
}

const { 
  variant = 'primary', 
  size = 'md', 
  href, 
  target,
  class: className = '',
  disabled = false,
  onclick
} = Astro.props;

const baseClasses = 'inline-flex items-center justify-center font-medium tracking-[0.1em] uppercase transition-all duration-500 relative group focus:outline-none focus:ring-2 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed';

const variantClasses = {
  primary: 'bg-white text-black hover:bg-white/95 border border-white/20 focus:ring-white/20',
  secondary: 'border border-white/20 text-white hover:border-white/40 hover:bg-white/5 focus:ring-white/20',
  ghost: 'text-white/80 hover:text-white hover:bg-white/5 focus:ring-white/20',
  outline: 'border border-gray-300 text-gray-900 hover:border-gray-400 hover:bg-gray-50 focus:ring-gray-300'
};

const sizeClasses = {
  sm: 'px-6 py-3 text-xs',
  md: 'px-8 py-4 text-sm',
  lg: 'px-10 py-5 text-sm',
  xl: 'px-12 py-6 text-base'
};

const classes = `${baseClasses} ${variantClasses[variant]} ${sizeClasses[size]} ${className}`;

const Tag = href ? 'a' : 'button';
const tagProps = href ? { href, target } : { type: 'button' as const, disabled, onclick };
---

<Tag class={classes} {...tagProps}>
  <span class="relative z-10">
    <slot />
  </span>
  {variant === 'primary' && (
    <div class="absolute inset-0 bg-gradient-to-r from-white/20 to-white/10 scale-0 group-hover:scale-100 transition-transform duration-500 origin-center"></div>
  )}
  {variant === 'secondary' && (
    <div class="absolute inset-0 bg-gradient-to-r from-transparent via-white/5 to-transparent scale-x-0 group-hover:scale-x-100 transition-transform duration-500 origin-center"></div>
  )}
</Tag>
